
syntax = "proto3";

package api;

import "google/api/annotations.proto";

// Base message with share options. Protobuf does not support inheritance so
// those are here for copy-paste commodity
// message FaasRequest {
//     string yaml     = 100; // Path to YAML file describing function(s)
//     string regex    = 101; // Regex to match with function names in YAML file")
//     string filter   = 102; // Wildcard to match with function names in YAML file")
// }

message BuildRequest {
      string image      = 1; // Docker image name to build
      string handler    = 2; // Directory with handler for function, e.g. handler.js
      string name       = 3; // Name of the deployed function
      string language       = 4; // Programming language template
      bool noCache      = 5; // Do not use Docker's build cache
      bool squash       = 6; // Use Docker's squash flag for smaller images [experimental]
      int32 parallel    = 7; // Build in parallel to depth specified.
      bool shrinkwrap   = 8; // Just write files to ./build/ folder for shrink-wrapping
      bytes archive     = 9;

      string yaml       = 100; // Path to YAML file describing function(s)
      string regex      = 101; // Regex to match with function names in YAML file")
      string filter     = 102; // Wildcard to match with function names in YAML file")
}

message DeployRequest {
    string fprocess            = 1; // Fprocess to be run by the watchdog
    string gateway             = 2;  // Gateway URL starting with http(s)://
    string handler             = 3;  // Directory with handler for function, e.g. handler.js
    string image               = 4;  // Docker image name to build
    string lang                = 5;  // Programming language template
    string name                = 6;  // Name of the deployed function
    string network             = 7;  // Name of the network
    repeated string env        = 8;  // Set one or more environment variables (ENVVAR=VALUE)
    repeated string label      = 9;  // Set one or more label (LABEL=VALUE)
    bool replace               = 10;  // Replace any existing function
    bool update                = 11; // Update existing functions
    repeated string constraint = 12; // Apply a constraint to the function
    repeated string secret     = 13; // Give the function access to a secure secret
}

message InvokeRequest {
    string name             = 1; // Name of the deployed function
    string gateway          = 2; // Gateway URL starting with http(s)://
    string contentType      = 3; // The content-type HTTP header such as application/json
    repeated string query   = 4; // pass query-string options
}

message ListRequest {
    string gateway  = 1; // Gateway URL starting with http(s)://
    bool verbose    = 2; // Verbose output for the function list
}

message LoginRequest {
    string gateway = 1; // Gateway URL starting with http(s)://
    string username = 2; // Gateway username
    string password = 3; // Gateway password
    // bool password_stdin = 3; // Reads the gateway password from stdin
}

message LogoutRequest {
    string gateway = 1; // Gateway URL starting with http(s)://
}

message NewFunctionRequest {
    string lang     = 1; // Language or template to use
    string gateway  = 2; // Gateway URL to store in YAML stack file
    bool list       = 3; // List available languages
}

message PushRequest {
    int32 parallel = 1; // Push images in parallel to depth specified.")
}

message TemplatePullRequest {
    bool overwrite = 1; // Overwrite existing templates?
    string repositoryURL = 2; // repository URL
}

message VersionRequest {
    bool shortVersion = 1; // Just print Git SHA
}

message Response {
  int32 code             = 1;
  string message         = 2;
  repeated string errors = 3;
}

service FaasCliService {
  rpc Build (BuildRequest) returns (Response) {
    option (google.api.http) = {
        post: "/v1/build"
        body: "*"
    };
  }
  rpc Deploy (DeployRequest) returns (Response) {
    option (google.api.http) = {
        post: "/v1/deploy"
        body: "*"
    };
  }
  rpc Invoke (InvokeRequest) returns (Response) {
    option (google.api.http) = {
        post: "/v1/invoke"
        body: "*"
    };
  }
  rpc List (ListRequest) returns (Response) {
    option (google.api.http) = {
        post: "/v1/list"
        body: "*"
    };
  }
  rpc Login (LoginRequest) returns (Response) {
    option (google.api.http) = {
        post: "/v1/login"
        body: "*"
    };
  }
  rpc Logout (LogoutRequest) returns (Response) {
    option (google.api.http) = {
        post: "/v1/logout"
        body: "*"
    };
  }
  rpc NewFunction (NewFunctionRequest) returns (Response) {
    option (google.api.http) = {
        post: "/v1/new"
        body: "*"
    };
  }
  rpc Push (PushRequest) returns (Response) {
    option (google.api.http) = {
        post: "/v1/push"
        body: "*"
    };
  }
  rpc TemplatePull (TemplatePullRequest) returns (Response) {
    option (google.api.http) = {
        post: "/v1/template/pull"
        body: "*"
    };
  }
  rpc Version (VersionRequest) returns (Response) {
    option (google.api.http) = {
        get: "/v1/version"
    };
  }
}
