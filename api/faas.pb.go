// Code generated by protoc-gen-go. DO NOT EDIT.
// source: faas.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	faas.proto

It has these top-level messages:
	BuildRequest
	DeployRequest
	InvokeRequest
	ListRequest
	LoginRequest
	LogoutRequest
	NewFunctionRequest
	PushRequest
	TemplatePullRequest
	VersionRequest
	Response
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildRequest struct {
	Image      string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Handler    string `protobuf:"bytes,2,opt,name=handler" json:"handler,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Lang       string `protobuf:"bytes,4,opt,name=lang" json:"lang,omitempty"`
	NoCache    bool   `protobuf:"varint,5,opt,name=noCache" json:"noCache,omitempty"`
	Squash     bool   `protobuf:"varint,6,opt,name=squash" json:"squash,omitempty"`
	Parallel   int32  `protobuf:"varint,7,opt,name=parallel" json:"parallel,omitempty"`
	Shrinkwrap bool   `protobuf:"varint,8,opt,name=shrinkwrap" json:"shrinkwrap,omitempty"`
	Archive    []byte `protobuf:"bytes,9,opt,name=archive,proto3" json:"archive,omitempty"`
}

func (m *BuildRequest) Reset()                    { *m = BuildRequest{} }
func (m *BuildRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildRequest) ProtoMessage()               {}
func (*BuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BuildRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *BuildRequest) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *BuildRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuildRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *BuildRequest) GetNoCache() bool {
	if m != nil {
		return m.NoCache
	}
	return false
}

func (m *BuildRequest) GetSquash() bool {
	if m != nil {
		return m.Squash
	}
	return false
}

func (m *BuildRequest) GetParallel() int32 {
	if m != nil {
		return m.Parallel
	}
	return 0
}

func (m *BuildRequest) GetShrinkwrap() bool {
	if m != nil {
		return m.Shrinkwrap
	}
	return false
}

func (m *BuildRequest) GetArchive() []byte {
	if m != nil {
		return m.Archive
	}
	return nil
}

type DeployRequest struct {
	Fprocess   string   `protobuf:"bytes,1,opt,name=fprocess" json:"fprocess,omitempty"`
	Gateway    string   `protobuf:"bytes,2,opt,name=gateway" json:"gateway,omitempty"`
	Handler    string   `protobuf:"bytes,3,opt,name=handler" json:"handler,omitempty"`
	Image      string   `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Lang       string   `protobuf:"bytes,5,opt,name=lang" json:"lang,omitempty"`
	Name       string   `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Network    string   `protobuf:"bytes,7,opt,name=network" json:"network,omitempty"`
	Env        []string `protobuf:"bytes,8,rep,name=env" json:"env,omitempty"`
	Label      []string `protobuf:"bytes,9,rep,name=label" json:"label,omitempty"`
	Replace    bool     `protobuf:"varint,10,opt,name=replace" json:"replace,omitempty"`
	Update     bool     `protobuf:"varint,11,opt,name=update" json:"update,omitempty"`
	Constraint []string `protobuf:"bytes,12,rep,name=constraint" json:"constraint,omitempty"`
	Secret     []string `protobuf:"bytes,13,rep,name=secret" json:"secret,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeployRequest) GetFprocess() string {
	if m != nil {
		return m.Fprocess
	}
	return ""
}

func (m *DeployRequest) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DeployRequest) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *DeployRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DeployRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *DeployRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *DeployRequest) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *DeployRequest) GetLabel() []string {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *DeployRequest) GetReplace() bool {
	if m != nil {
		return m.Replace
	}
	return false
}

func (m *DeployRequest) GetUpdate() bool {
	if m != nil {
		return m.Update
	}
	return false
}

func (m *DeployRequest) GetConstraint() []string {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (m *DeployRequest) GetSecret() []string {
	if m != nil {
		return m.Secret
	}
	return nil
}

type InvokeRequest struct {
	Name        string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Gateway     string   `protobuf:"bytes,2,opt,name=gateway" json:"gateway,omitempty"`
	ContentType string   `protobuf:"bytes,3,opt,name=contentType" json:"contentType,omitempty"`
	Query       []string `protobuf:"bytes,4,rep,name=query" json:"query,omitempty"`
}

func (m *InvokeRequest) Reset()                    { *m = InvokeRequest{} }
func (m *InvokeRequest) String() string            { return proto.CompactTextString(m) }
func (*InvokeRequest) ProtoMessage()               {}
func (*InvokeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InvokeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InvokeRequest) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *InvokeRequest) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *InvokeRequest) GetQuery() []string {
	if m != nil {
		return m.Query
	}
	return nil
}

type ListRequest struct {
	Gateway string `protobuf:"bytes,1,opt,name=gateway" json:"gateway,omitempty"`
	Verbose bool   `protobuf:"varint,2,opt,name=verbose" json:"verbose,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListRequest) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *ListRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

type LoginRequest struct {
	Gateway  string `protobuf:"bytes,1,opt,name=gateway" json:"gateway,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginRequest) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LogoutRequest struct {
	Gateway string `protobuf:"bytes,1,opt,name=gateway" json:"gateway,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LogoutRequest) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type NewFunctionRequest struct {
	Lang    string `protobuf:"bytes,1,opt,name=lang" json:"lang,omitempty"`
	Gateway string `protobuf:"bytes,2,opt,name=gateway" json:"gateway,omitempty"`
	List    bool   `protobuf:"varint,3,opt,name=list" json:"list,omitempty"`
}

func (m *NewFunctionRequest) Reset()                    { *m = NewFunctionRequest{} }
func (m *NewFunctionRequest) String() string            { return proto.CompactTextString(m) }
func (*NewFunctionRequest) ProtoMessage()               {}
func (*NewFunctionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NewFunctionRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *NewFunctionRequest) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *NewFunctionRequest) GetList() bool {
	if m != nil {
		return m.List
	}
	return false
}

type PushRequest struct {
	Parallel int32 `protobuf:"varint,1,opt,name=parallel" json:"parallel,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PushRequest) GetParallel() int32 {
	if m != nil {
		return m.Parallel
	}
	return 0
}

type TemplatePullRequest struct {
	Overwrite     bool   `protobuf:"varint,1,opt,name=overwrite" json:"overwrite,omitempty"`
	RepositoryURL string `protobuf:"bytes,2,opt,name=repositoryURL" json:"repositoryURL,omitempty"`
}

func (m *TemplatePullRequest) Reset()                    { *m = TemplatePullRequest{} }
func (m *TemplatePullRequest) String() string            { return proto.CompactTextString(m) }
func (*TemplatePullRequest) ProtoMessage()               {}
func (*TemplatePullRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TemplatePullRequest) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

func (m *TemplatePullRequest) GetRepositoryURL() string {
	if m != nil {
		return m.RepositoryURL
	}
	return ""
}

type VersionRequest struct {
	ShortVersion bool `protobuf:"varint,1,opt,name=shortVersion" json:"shortVersion,omitempty"`
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *VersionRequest) GetShortVersion() bool {
	if m != nil {
		return m.ShortVersion
	}
	return false
}

type Response struct {
	Code    int32    `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Errors  []string `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildRequest)(nil), "api.BuildRequest")
	proto.RegisterType((*DeployRequest)(nil), "api.DeployRequest")
	proto.RegisterType((*InvokeRequest)(nil), "api.InvokeRequest")
	proto.RegisterType((*ListRequest)(nil), "api.ListRequest")
	proto.RegisterType((*LoginRequest)(nil), "api.LoginRequest")
	proto.RegisterType((*LogoutRequest)(nil), "api.LogoutRequest")
	proto.RegisterType((*NewFunctionRequest)(nil), "api.NewFunctionRequest")
	proto.RegisterType((*PushRequest)(nil), "api.PushRequest")
	proto.RegisterType((*TemplatePullRequest)(nil), "api.TemplatePullRequest")
	proto.RegisterType((*VersionRequest)(nil), "api.VersionRequest")
	proto.RegisterType((*Response)(nil), "api.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FaasCliService service

type FaasCliServiceClient interface {
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*Response, error)
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*Response, error)
	Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*Response, error)
	NewFunction(ctx context.Context, in *NewFunctionRequest, opts ...grpc.CallOption) (*Response, error)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Response, error)
	TemplatePull(ctx context.Context, in *TemplatePullRequest, opts ...grpc.CallOption) (*Response, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*Response, error)
}

type faasCliServiceClient struct {
	cc *grpc.ClientConn
}

func NewFaasCliServiceClient(cc *grpc.ClientConn) FaasCliServiceClient {
	return &faasCliServiceClient{cc}
}

func (c *faasCliServiceClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/api.FaasCliService/Build", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faasCliServiceClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/api.FaasCliService/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faasCliServiceClient) Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/api.FaasCliService/Invoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faasCliServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/api.FaasCliService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faasCliServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/api.FaasCliService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faasCliServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/api.FaasCliService/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faasCliServiceClient) NewFunction(ctx context.Context, in *NewFunctionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/api.FaasCliService/NewFunction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faasCliServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/api.FaasCliService/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faasCliServiceClient) TemplatePull(ctx context.Context, in *TemplatePullRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/api.FaasCliService/TemplatePull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faasCliServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/api.FaasCliService/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FaasCliService service

type FaasCliServiceServer interface {
	Build(context.Context, *BuildRequest) (*Response, error)
	Deploy(context.Context, *DeployRequest) (*Response, error)
	Invoke(context.Context, *InvokeRequest) (*Response, error)
	List(context.Context, *ListRequest) (*Response, error)
	Login(context.Context, *LoginRequest) (*Response, error)
	Logout(context.Context, *LogoutRequest) (*Response, error)
	NewFunction(context.Context, *NewFunctionRequest) (*Response, error)
	Push(context.Context, *PushRequest) (*Response, error)
	TemplatePull(context.Context, *TemplatePullRequest) (*Response, error)
	Version(context.Context, *VersionRequest) (*Response, error)
}

func RegisterFaasCliServiceServer(s *grpc.Server, srv FaasCliServiceServer) {
	s.RegisterService(&_FaasCliService_serviceDesc, srv)
}

func _FaasCliService_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaasCliServiceServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FaasCliService/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaasCliServiceServer).Build(ctx, req.(*BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaasCliService_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaasCliServiceServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FaasCliService/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaasCliServiceServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaasCliService_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaasCliServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FaasCliService/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaasCliServiceServer).Invoke(ctx, req.(*InvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaasCliService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaasCliServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FaasCliService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaasCliServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaasCliService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaasCliServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FaasCliService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaasCliServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaasCliService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaasCliServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FaasCliService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaasCliServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaasCliService_NewFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaasCliServiceServer).NewFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FaasCliService/NewFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaasCliServiceServer).NewFunction(ctx, req.(*NewFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaasCliService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaasCliServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FaasCliService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaasCliServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaasCliService_TemplatePull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplatePullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaasCliServiceServer).TemplatePull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FaasCliService/TemplatePull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaasCliServiceServer).TemplatePull(ctx, req.(*TemplatePullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaasCliService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaasCliServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FaasCliService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaasCliServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaasCliService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.FaasCliService",
	HandlerType: (*FaasCliServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Build",
			Handler:    _FaasCliService_Build_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _FaasCliService_Deploy_Handler,
		},
		{
			MethodName: "Invoke",
			Handler:    _FaasCliService_Invoke_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FaasCliService_List_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _FaasCliService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _FaasCliService_Logout_Handler,
		},
		{
			MethodName: "NewFunction",
			Handler:    _FaasCliService_NewFunction_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _FaasCliService_Push_Handler,
		},
		{
			MethodName: "TemplatePull",
			Handler:    _FaasCliService_TemplatePull_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _FaasCliService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faas.proto",
}

func init() { proto.RegisterFile("faas.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xcd, 0x6e, 0x1b, 0x37,
	0x10, 0xc6, 0x5a, 0x3f, 0x5e, 0x8d, 0x24, 0x37, 0xa1, 0xd3, 0x94, 0x10, 0x8c, 0x42, 0x20, 0x7a,
	0x50, 0x7a, 0xb0, 0xd0, 0x9f, 0x53, 0x51, 0x20, 0x68, 0x52, 0x04, 0x08, 0x60, 0x14, 0xc6, 0x36,
	0x09, 0xd0, 0x5b, 0xe9, 0xd5, 0x44, 0x5a, 0x98, 0x26, 0xd7, 0x24, 0x57, 0x82, 0xae, 0x7d, 0x85,
	0xbe, 0x50, 0xaf, 0x3d, 0xf7, 0x15, 0x7a, 0xee, 0x33, 0x14, 0x9c, 0xe5, 0xaa, 0xbb, 0x4e, 0xed,
	0xdc, 0xf8, 0x8d, 0x66, 0x3e, 0xce, 0x7c, 0x3b, 0x1f, 0x05, 0xf0, 0x5e, 0x4a, 0x77, 0x5e, 0x5a,
	0xe3, 0x0d, 0xeb, 0xc9, 0xb2, 0x98, 0x9d, 0xad, 0x8d, 0x59, 0x2b, 0x5c, 0xca, 0xb2, 0x58, 0x4a,
	0xad, 0x8d, 0x97, 0xbe, 0x30, 0x3a, 0xa6, 0x88, 0x7f, 0x12, 0x98, 0xbc, 0xa8, 0x0a, 0xb5, 0xca,
	0xf0, 0xb6, 0x42, 0xe7, 0xd9, 0x13, 0x18, 0x14, 0x37, 0x72, 0x8d, 0x3c, 0x99, 0x27, 0x8b, 0x51,
	0x56, 0x03, 0xc6, 0xe1, 0x78, 0x23, 0xf5, 0x4a, 0xa1, 0xe5, 0x47, 0x14, 0x6f, 0x20, 0x63, 0xd0,
	0xd7, 0xf2, 0x06, 0x79, 0x8f, 0xc2, 0x74, 0x0e, 0x31, 0x25, 0xf5, 0x9a, 0xf7, 0xeb, 0x58, 0x38,
	0x07, 0x06, 0x6d, 0x5e, 0xca, 0x7c, 0x83, 0x7c, 0x30, 0x4f, 0x16, 0x69, 0xd6, 0x40, 0xf6, 0x14,
	0x86, 0xee, 0xb6, 0x92, 0x6e, 0xc3, 0x87, 0xf4, 0x43, 0x44, 0x6c, 0x06, 0x69, 0x29, 0xad, 0x54,
	0x0a, 0x15, 0x3f, 0x9e, 0x27, 0x8b, 0x41, 0x76, 0xc0, 0xec, 0x73, 0x00, 0xb7, 0xb1, 0x85, 0xbe,
	0xde, 0x59, 0x59, 0xf2, 0x94, 0xea, 0x5a, 0x91, 0x70, 0x9b, 0xb4, 0xf9, 0xa6, 0xd8, 0x22, 0x1f,
	0xcd, 0x93, 0xc5, 0x24, 0x6b, 0xa0, 0xf8, 0xf3, 0x08, 0xa6, 0x3f, 0x62, 0xa9, 0xcc, 0xbe, 0x99,
	0x78, 0x06, 0xe9, 0xfb, 0xd2, 0x9a, 0x1c, 0x9d, 0x8b, 0x43, 0x1f, 0x70, 0xe0, 0x59, 0x4b, 0x8f,
	0x3b, 0xb9, 0x6f, 0xe6, 0x8e, 0xb0, 0xad, 0x48, 0xaf, 0xab, 0xc8, 0x41, 0xc1, 0x7e, 0x5b, 0xc1,
	0x46, 0x93, 0x41, 0x4b, 0x93, 0x46, 0xbb, 0x61, 0x4b, 0xbb, 0xa0, 0x13, 0xfa, 0x9d, 0xb1, 0xd7,
	0x34, 0xf4, 0x28, 0x6b, 0x20, 0x7b, 0x04, 0x3d, 0xd4, 0x5b, 0x9e, 0xce, 0x7b, 0x8b, 0x51, 0x16,
	0x8e, 0xe1, 0x26, 0x25, 0xaf, 0x50, 0xf1, 0x11, 0xc5, 0x6a, 0x10, 0x18, 0x2c, 0x96, 0x4a, 0xe6,
	0xc8, 0xa1, 0x56, 0x3a, 0xc2, 0xa0, 0x74, 0x55, 0xae, 0xa4, 0x47, 0x3e, 0xae, 0x95, 0xae, 0x51,
	0x50, 0x33, 0x37, 0xda, 0x79, 0x2b, 0x0b, 0xed, 0xf9, 0x84, 0xc8, 0x5a, 0x11, 0xfa, 0x42, 0x98,
	0x5b, 0xf4, 0x7c, 0x4a, 0xbf, 0x45, 0x24, 0x2a, 0x98, 0xbe, 0xd6, 0x5b, 0x73, 0x8d, 0x8d, 0x94,
	0xcd, 0x40, 0x49, 0x77, 0xa0, 0x7b, 0x24, 0x9c, 0xc3, 0x38, 0x37, 0xda, 0xa3, 0xf6, 0x6f, 0xf6,
	0x65, 0xb3, 0x41, 0xed, 0x50, 0x18, 0xf0, 0xb6, 0x42, 0xbb, 0xe7, 0xfd, 0x7a, 0x40, 0x02, 0xe2,
	0x07, 0x18, 0x5f, 0x14, 0xce, 0x37, 0x97, 0xb6, 0x2e, 0x48, 0x3e, 0xf8, 0x46, 0x5b, 0xb4, 0x57,
	0xc6, 0x21, 0x5d, 0x9d, 0x66, 0x0d, 0x14, 0xbf, 0xc2, 0xe4, 0xc2, 0xac, 0x0b, 0xfd, 0x71, 0x8e,
	0x19, 0xa4, 0x95, 0x43, 0x4b, 0x63, 0xd5, 0xfd, 0x1f, 0x70, 0xbd, 0xa1, 0xce, 0xed, 0x8c, 0x5d,
	0xc5, 0xee, 0x0f, 0x58, 0x3c, 0x83, 0xe9, 0x85, 0x59, 0x9b, 0xea, 0xe3, 0x6d, 0x8a, 0x77, 0xc0,
	0x7e, 0xc2, 0xdd, 0xab, 0x4a, 0xe7, 0xc1, 0x99, 0x2d, 0x2d, 0x69, 0x61, 0x92, 0xae, 0x89, 0xee,
	0xd1, 0x32, 0x64, 0x17, 0xce, 0x53, 0x1b, 0x69, 0x46, 0x67, 0xf1, 0x0c, 0xc6, 0x97, 0x95, 0xdb,
	0xb4, 0xf6, 0xfc, 0xe0, 0xa7, 0xa4, 0xeb, 0x27, 0xf1, 0x0b, 0x9c, 0xbe, 0xc1, 0x9b, 0x52, 0x49,
	0x8f, 0x97, 0x95, 0x52, 0x4d, 0xc9, 0x19, 0x8c, 0xcc, 0x16, 0xed, 0xce, 0x16, 0xbe, 0xfe, 0xa8,
	0x69, 0xf6, 0x5f, 0x80, 0x7d, 0x01, 0x53, 0x8b, 0xa5, 0x71, 0x85, 0x37, 0x76, 0xff, 0x36, 0xbb,
	0x88, 0x3d, 0x75, 0x83, 0xe2, 0x5b, 0x38, 0x79, 0x87, 0xd6, 0xb5, 0x26, 0x13, 0x30, 0x71, 0x1b,
	0x63, 0x7d, 0x0c, 0x47, 0xe2, 0x4e, 0x4c, 0x5c, 0x42, 0x9a, 0xa1, 0x2b, 0x8d, 0x76, 0x64, 0x9d,
	0xdc, 0xac, 0x30, 0x36, 0x4d, 0xe7, 0xa0, 0xc4, 0x0d, 0x3a, 0x17, 0x6c, 0x16, 0x95, 0x88, 0x30,
	0x2c, 0x2b, 0x5a, 0x6b, 0xac, 0xe3, 0xbd, 0x7a, 0x59, 0x6b, 0xf4, 0xf5, 0x1f, 0x03, 0x38, 0x79,
	0x25, 0xa5, 0x7b, 0xa9, 0x8a, 0x9f, 0xd1, 0x6e, 0x8b, 0x1c, 0xd9, 0x73, 0x18, 0xd0, 0xdb, 0xc7,
	0x1e, 0x9f, 0xcb, 0xb2, 0x38, 0x6f, 0xbf, 0x83, 0xb3, 0x29, 0x85, 0x9a, 0x1e, 0xc4, 0x93, 0xdf,
	0xfe, 0xfa, 0xfb, 0xf7, 0xa3, 0x13, 0x31, 0x5a, 0x6e, 0xbf, 0x5a, 0x5e, 0x85, 0xc4, 0xef, 0x92,
	0x2f, 0xd9, 0x0b, 0x18, 0xd6, 0x6f, 0x09, 0x63, 0x94, 0xde, 0x79, 0x58, 0xee, 0x52, 0x7c, 0x4a,
	0x14, 0x9f, 0x08, 0x08, 0x14, 0x2b, 0xca, 0x8c, 0x1c, 0xb5, 0x89, 0x22, 0x47, 0xc7, 0x51, 0x0f,
	0x72, 0x14, 0x94, 0x19, 0x38, 0xbe, 0x87, 0x7e, 0x70, 0x04, 0x7b, 0x44, 0xd9, 0x2d, 0x73, 0xdc,
	0xad, 0x3f, 0xa5, 0xfa, 0xa9, 0x48, 0x43, 0x7d, 0x58, 0x92, 0x50, 0xfd, 0x1c, 0x06, 0x64, 0x86,
	0x28, 0x43, 0xdb, 0x18, 0x0f, 0xca, 0xa0, 0x42, 0x62, 0x1c, 0xa1, 0xde, 0xf5, 0x38, 0x42, 0x67,
	0xf1, 0x1f, 0x1c, 0x41, 0x51, 0x66, 0xe0, 0x78, 0x0d, 0xe3, 0x96, 0x09, 0xd8, 0x67, 0x54, 0xf4,
	0xa1, 0x2d, 0xee, 0xb2, 0x31, 0x62, 0x9b, 0x88, 0xe3, 0xc0, 0xa6, 0x71, 0x17, 0xd5, 0x08, 0x7b,
	0x1f, 0xd5, 0x68, 0x59, 0xe0, 0x41, 0x35, 0xca, 0xca, 0x6d, 0x42, 0xf5, 0x5b, 0x98, 0xb4, 0xad,
	0xc0, 0x38, 0xd5, 0xfc, 0x8f, 0x3b, 0xee, 0xb2, 0x9d, 0x11, 0xdb, 0x53, 0xf1, 0x38, 0xb0, 0xf9,
	0x98, 0xbf, 0x2c, 0x2b, 0xa5, 0x6a, 0x8d, 0x8e, 0xe3, 0x6e, 0xb3, 0x53, 0xaa, 0xeb, 0x9a, 0xe2,
	0x9e, 0xd6, 0xd8, 0x38, 0x90, 0x6d, 0xeb, 0xd4, 0xab, 0x21, 0xfd, 0x67, 0x7f, 0xf3, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xe9, 0x18, 0x07, 0x6c, 0xe4, 0x07, 0x00, 0x00,
}
